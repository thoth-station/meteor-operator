---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: customnbimages.meteor.zone
spec:
  group: meteor.zone
  names:
    kind: CustomNBImage
    listKind: CustomNBImageList
    plural: customnbimages
    singular: customnbimage
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Phase
      jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: CustomNBImage is the Schema for the customnbimages API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CustomNBImageSpec defines the desired state of CustomNBImage
            properties:
              buildType:
                description: BuildType is the strategy
                enum:
                - ImageImport
                - PackageList
                - GitRepository
                type: string
              builderImage:
                description: BuilderImage is the reference to the base image, used
                  for building
                type: string
              fromImage:
                description: FromUrl is the reference to the source image, used for
                  import strategy
                type: string
              packageVersions:
                description: PackageVersion is a set of Packages including their Version
                  Specifiers
                items:
                  type: string
                type: array
              repository:
                description: Repository is the URL of the git repository, used for
                  building
                type: string
              runtimeEnvironment:
                description: RuntimeEnvironment is the runtime environment to use
                  for the Custom Notebook Image
                properties:
                  builderImage:
                    description: BuilderImage is an alternative the the three above
                      fields
                    type: string
                  osName:
                    description: OSName is the Name of the Operating System to use
                    type: string
                  osVersion:
                    description: OSVersion is the Version of the Operating System
                      to use
                    type: string
                  pythonVersion:
                    description: PythonVersion is the version of Python to use
                    type: string
                type: object
            required:
            - buildType
            type: object
          status:
            description: CustomNBImageStatus defines the observed state of CustomNBImage
            properties:
              conditions:
                description: Current service state of Meteor.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{ // Represents the observations of a foo's
                    current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              phase:
                description: Current condition of the Shower.
                enum:
                - Pending
                - Failed
                - Preparing
                - CreatingRepository
                - Resolving
                - Running
                - Building
                - Importing
                - Validating
                - Ready
                type: string
              pipelines:
                description: Stores results from pipelines. Empty if neither pipeline
                  has completed.
                items:
                  properties:
                    name:
                      type: string
                    pipelineRunName:
                      description: Name of the corresponding PipelineRun resource
                      type: string
                    ready:
                      description: True if build completed successfully.
                      type: string
                    url:
                      description: Url to a running deployment. Routable at least
                        within the cluster. Empty if not yet scheduled.
                      type: string
                  required:
                  - name
                  - pipelineRunName
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
